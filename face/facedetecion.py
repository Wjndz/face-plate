import cv2
import mediapipe as mp
import numpy as np
import os
import face_recognition
import pymongo
from datetime import datetime
import time
import uuid
import heapq

# üîπ K·∫øt n·ªëi MongoDB
client = pymongo.MongoClient("mongodb+srv://team2:team21234@cluster0.0tdjk.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
db = client["face_db"]
collection = db["face_vectors"]

# üîπ Kh·ªüi t·∫°o MediaPipe Face Detection
mp_face_detection = mp.solutions.face_detection
face_detection = mp_face_detection.FaceDetection(model_selection=1, min_detection_confidence=0.6)

# üîπ Th∆∞ m·ª•c l∆∞u khu√¥n m·∫∑t
output_dir = "detected_faces"
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# üîπ M·ªü camera (0: webcam m·∫∑c ƒë·ªãnh, 1: iVCam)
cap = cv2.VideoCapture(0)

# L∆∞u tr·∫°ng th√°i nh·∫≠n di·ªán
last_saved_time = 0
face_candidates = []  # Danh s√°ch c√°c khu√¥n m·∫∑t ·ª©ng vi√™n (face_vector, confidence)
max_candidates = 3    # S·ªë l∆∞·ª£ng ·ª©ng vi√™n t·ªëi ƒëa
min_confidence = 0.6  # Ng∆∞·ª°ng tin c·∫≠y t·ªëi thi·ªÉu

# üü¢ H√ÄM: T√¨m user trong DB d·ª±a v√†o vector khu√¥n m·∫∑t
def find_existing_user(face_vector):
    users = collection.find()
    for user in users:
        stored_vector = np.array(user["vector"])
        match = face_recognition.compare_faces([stored_vector], face_vector, tolerance=0.5)
        if match[0]:  
            return user["user_id"]  # Tr·∫£ v·ªÅ user_id n·∫øu kh·ªõp
    return None  # Kh√¥ng t√¨m th·∫•y

def detect_face(frame):
    """
    Nh·∫≠n di·ªán khu√¥n m·∫∑t trong khung h√¨nh v√† tr·∫£ v·ªÅ ID ng∆∞·ªùi d√πng n·∫øu t√¨m th·∫•y
    """
    global last_saved_time, face_candidates
    
    # ƒê·ªïi m√†u t·ª´ BGR (OpenCV) sang RGB (MediaPipe)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # Ch·∫°y nh·∫≠n di·ªán khu√¥n m·∫∑t
    results = face_detection.process(rgb_frame)
    
    # N·∫øu ph√°t hi·ªán khu√¥n m·∫∑t
    if results.detections:
        for detection in results.detections:
            # L·∫•y confidence score
            confidence = detection.score[0]
            
            # L·∫•y t·ªça ƒë·ªô bounding box
            bbox = detection.location_data.relative_bounding_box
            h, w, _ = frame.shape
            x, y = int(bbox.xmin * w), int(bbox.ymin * h)
            width, height = int(bbox.width * w), int(bbox.height * h)
            
            # V·∫Ω bounding box
            cv2.rectangle(frame, (x, y), (x + width, y + height), (0, 255, 0), 2)
            
            # Hi·ªÉn th·ªã confidence score
            cv2.putText(frame, f"Confidence: {confidence:.2f}", (x, y - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            
            # Ch·ªâ x·ª≠ l√Ω khu√¥n m·∫∑t c√≥ ƒë·ªô tin c·∫≠y tr√™n ng∆∞·ª°ng
            if confidence > min_confidence:
                # C·∫Øt khu√¥n m·∫∑t
                face_roi = frame[y:y+height, x:x+width]
                
                # Ki·ªÉm tra khu√¥n m·∫∑t c√≥ h·ª£p l·ªá kh√¥ng
                if face_roi.size == 0 or face_roi.shape[0] == 0 or face_roi.shape[1] == 0:
                    continue
                
                # Chuy·ªÉn th√†nh dlib.rectangle ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng v·ªõi face_recognition
                top, right, bottom, left = y, x + width, y + height, x
                
                # T√¨m face encoding
                try:
                    face_encoding = face_recognition.face_encodings(rgb_frame, [(top, right, bottom, left)])[0]
                    
                    # Th√™m v√†o danh s√°ch ·ª©ng vi√™n
                    heapq.heappush(face_candidates, (confidence, face_encoding))
                    
                    # Ch·ªâ gi·ªØ max_candidates khu√¥n m·∫∑t c√≥ ƒë·ªô tin c·∫≠y cao nh·∫•t
                    if len(face_candidates) > max_candidates:
                        heapq.heappop(face_candidates)  # Lo·∫°i b·ªè khu√¥n m·∫∑t c√≥ ƒë·ªô tin c·∫≠y th·∫•p nh·∫•t
                    
                    # Ki·ªÉm tra n·∫øu ƒë·ªß ·ª©ng vi√™n v√† ƒë√£ qua 2 gi√¢y k·ªÉ t·ª´ l·∫ßn l∆∞u cu·ªëi c√πng
                    current_time = time.time()
                    if len(face_candidates) >= max_candidates and (current_time - last_saved_time) > 2:
                        # L·∫•y khu√¥n m·∫∑t c√≥ ƒë·ªô tin c·∫≠y cao nh·∫•t
                        best_confidence, best_face_encoding = max(face_candidates)
                        
                        # Ki·ªÉm tra xem khu√¥n m·∫∑t n√†y ƒë√£ t·ªìn t·∫°i trong DB ch∆∞a
                        existing_user_id = find_existing_user(best_face_encoding)
                        
                        if existing_user_id:
                            print(f"[EXISTING USER] ƒê√£ nh·∫≠n di·ªán user {existing_user_id}!")
                            
                            # C·∫≠p nh·∫≠t th·ªùi gian truy c·∫≠p
                            collection.update_one(
                                {"user_id": existing_user_id},
                                {"$set": {"last_access": current_time}}
                            )
                            
                            # Reset danh s√°ch ·ª©ng vi√™n
                            face_candidates = []
                            last_saved_time = current_time
                            
                            return existing_user_id
                        else:
                            # T·∫°o user m·ªõi ch·ªâ khi ch∆∞a t·ªìn t·∫°i
                            new_user_id = uuid.uuid4().hex[:8]  # T·∫°o ID ng·∫Øn g·ªçn
                            
                            # L∆∞u ·∫£nh khu√¥n m·∫∑t
                            timestamp = datetime.utcfromtimestamp(current_time).strftime('%Y-%m-%d_%H-%M-%S')
                            filename = f"{new_user_id}_{best_confidence:.2f}_{timestamp}.jpg"
                            filepath = os.path.join(output_dir, filename)
                            cv2.imwrite(filepath, face_roi)
                            
                            # L∆∞u vector khu√¥n m·∫∑t v√†o DB
                            collection.insert_one({
                                "user_id": new_user_id,
                                "vector": best_face_encoding.tolist(),
                                "created_at": current_time,
                                "last_access": current_time
                            })
                            
                            print(f"[NEW USER] ƒê√£ th√™m user {new_user_id} v√†o database!")
                            print(f"[INFO] L∆∞u ·∫£nh {filename} cho user {new_user_id}")
                            
                            # Reset danh s√°ch ·ª©ng vi√™n
                            face_candidates = []
                            last_saved_time = current_time
                            
                            return new_user_id
                except Exception as e:
                    print(f"[ERROR] {e}")
    
    # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ·ª©ng vi√™n ƒë√£ thu th·∫≠p
    cv2.putText(frame, f"Candidates: {len(face_candidates)}/{max_candidates}", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
    
    return None

# Ch·∫°y ch∆∞∆°ng tr√¨nh n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if __name__ == "__main__":
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        
        user_id = detect_face(frame)
        if user_id:
            cv2.putText(frame, f"User: {user_id}", (10, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        
        cv2.imshow("Face Detection", frame)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    cap.release()
    cv2.destroyAllWindows()